
##### Documenta√ß√£o Diana Framework - Vertical de Neg√≥cios PJ #####



# Objetivo

  O objetivo deste framework √© facilitar a cria√ß√£o e manipula√ß√£o de tabelas no formato Delta, tanto em tabelas f√≠sicas quanto views no ambiente Databricks. Ele foi desenvolvido para ser utilizado com a combina√ß√£o de Python e SQL, utilizando o Spark.



# Vers√£o -> 1.1



# Link para o notebook modelo frame Diana

  Para o bom funcionamento do frame, necess√°rio aletar o e-mail contido no meio da string.

  íäπíäπíäπ Notebook modelo frame Diana Tabela -> https://banco_cooperativo-dev.cloud.databricks.com/editor/notebooks/3050012463573001
  íäπíäπíäπ Notebook modelo frame Diana View -> https://banco_cooperativo-dev.cloud.databricks.com/editor/notebooks/3050012463572855
  
  Tabela - Quando existe a necessidade de ter dados provenientes de fontes externas, como Teradata e Denodo. Ou se for necess√°rio enviar os dados tratados para o Power BI ou Denodo. Ou quando houver necessidade de armazenar fisicamente os dados, seja por motivos de hist√≥rico e ou manuten√ß√£o. Nesse formato, o processamento √© mais oneroso em v√°rios aspectos. Exigindo ainda atua√ß√£o da equipe da engenharia para a completude do processo, por meio de uma rotina de atualiza√ß√£o e monitoramento.

  View - Quando existe a necessidade de ter os dados mais atualizados ou em uma demanda repetitiva. Como as views n√£o armazenam os dados fisicamente, o processo de forma geral √© mais r√°pido e fluido. N√£o exigindo a cria√ß√£o de uma rotina de atualiza√ß√£o, eliminando diversos custos do processo.
  


# Caminho absoluto para o framework Diana

  Comando: %run Workspace/Users/SEU_E-MAIL@banco_cooperativo.com.br/repositorio_exps/utils/Diana_framework/diana_framework



# Entradas esperadas para cria√ß√£o de exp's via ordem do usu√°rio por meio do comando TableManager:

  ## Comandos para configura√ß√£o do servi√ßo

    TableManager.table_columns - Serve para configurar as colunas da exposi√ß√£o. √â necess√°rio informar o nome e formato das colunas. O campo descritivo √© opcional, por√©m √© recomendado preench√™-lo.

    TableManager.table_pk - Cria um crit√©rio de unicidade dentro da exposi√ß√£o.

    TableManager.table_partition - Este comando realiza a parti√ß√£o dos dados finais. Embora n√£o seja obrigat√≥rio, quando acionado auxilia no desempenho da consulta final, caso o crit√©rio seja adicionado √† consulta.

    TableManager.table_comment - Adiciona um coment√°rio a exposi√ß√£o final.

    TableManager.source_view - Serve para nomear a esposi√ß√£o final, bem como alimentar o objeto que ser√° criado pelo usu√°rio.

  ## Comandos para cria√ß√£o da exposi√ß√£o

    Tablemanager.check_table() - Comando que realiza a valida√ß√£o de alguns fatores da exposi√ß√£o, tais como o preenchimento de alguns campos, op√ß√µes de particionamento, n√∫mero, nome e formato das colunas, entre outros.

    TableManager.drop_table() - Comando para dropar a tabela j√° existente, orientado pelo nome indicado pelo usu√°rio. Este comando dever√° apagar a tabela, diret√≥rio e todos os seus anexos e links vinculados.

    TableManager.create_table_overwrite() - Comando para criar a exposi√ß√£o em modo de escrita OVERWRITE. Vai criar um objeto com as configura√ß√µes indicadas pelo usu√°rio e inserir todas as linhas encontradas na query final.

    TableManager.create_table_append() - Comando para acresentar linhas √† tabela que j√° existe. Para isso, √© feito um confronto entre a coluna UNIQUE_ID da tabela existente e a mesma coluna da query final. As linhas da query que n√£o estiverem presentes na tabela ser√£o adicionadas √† tabela existente. Caso a tabela indicada pelo usu√°rio n√£o seja encontrada, o modo de escrita OVERWRITE ser√° acionado automaticamente.

    TableManager.create_table_upsert() - Comando para acresentar a atualizar as linhas da tabela que j√° existe. Para isso, √© feito um confronto entre a coluna UNIQUE_ID da tabela existente e a mesma coluna da query final. As linhas da query que n√£o estiverem presentes na tabela ser√£o adicionadas √† tabela existente. As linhas da tabela que j√° estiverem presentes na query, ter√£o seus registros atualizados com os dados da query. Caso a tabela indicada pelo usu√°rio n√£o seja encontrada, o modo de escrita OVERWRITE ser√° acionado automaticamente.

    TableManager.display_table() - Comando para exibir as primeiras linhas do objeto criado via framework.



# Entradas esperadas para cria√ß√£o de view's via ordem do usu√°rio por meio do comando TableManage:

  ## Comandos para configura√ß√£o do servi√ßo

    TableManager.name_view - Serve para nomear a view que ser√° criada pelo usu√°rio.

  ## Comandos para cria√ß√£o da view

    TableManager.create_view() - Comando para criar ou recriar uma view persistente com base na query inserida na vari√°vel 'query_view'. Essa view ser√° criada com as configura√ß√µes indicadas pelo usu√°rio, incluindo o nome da view, o schema e a query que popula a view. Outras op√ß√µes como particionamento e chave_pk n√£o se aplicam a esse formato, pois os dados s√£o alterados a cada execu√ß√£o. Na constru√ß√£o da consulta, utilize somente dados vindos do Unity Catalog, sendo ref's e ou exp's. Sem a tualiza√ß√£o de temp view, ou dados tempor√°rios.

    TableManager.display_view() - Comando para exibir as primeiras linhas do objeto criado via framework.
